{"version":3,"sources":["components/Answer.js","components/util.js","components/Multiplication.js","serviceWorker.js","index.js","components/App.js","components/Multiplication.module.css"],"names":["Answer","_ref","answerQuestion","props","Object","objectWithoutProperties","_useState","useState","_useState2","slicedToArray","answer","setAnswer","react_default","a","createElement","assign","type","autoFocus","value","onChange","e","target","onKeyPress","key","parseInt","preventDefault","randomInteger","from","to","range","Math","floor","random","pickNewNumbers","Multiplication","_useState2$","number1","number2","setNumbers","className","container","question","equals","Answer_Answer","Boolean","window","location","hostname","match","ReactDOM","render","Multiplication_Multiplication","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"sLAEaA,EAAS,SAAAC,GAGO,IAFJC,EAEID,EAFJC,eACGC,EACCC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,oBAAAK,EAECC,mBAAS,IAFVC,EAAAJ,OAAAK,EAAA,EAAAL,CAAAE,EAAA,GAEpBI,EAFoBF,EAAA,GAEZG,EAFYH,EAAA,GAgB3B,OACEI,EAAAC,EAAAC,cAAA,QAAAV,OAAAW,OAAA,CACEC,KAAK,SACLC,WAAS,EACTC,MAAOR,EACPS,SAAU,SAAAC,GAAC,OAAIT,EAAUS,EAAEC,OAAOH,QAClCI,WAbJ,SAAoBF,GACJ,UAAVA,EAAEG,MALNrB,EAAesB,SAASd,IACxBC,EAAU,IAMRS,EAAEK,oBAWEtB,KC5BH,SAASuB,EAAcC,EAAMC,GAClC,IAAMC,EAAQD,EAAKD,EAAO,EAC1B,OAAOG,KAAKC,MAAMD,KAAKE,SAAWH,GAASF,ECM7C,SAASM,IACP,MAAO,CACLP,EAAc,EAAG,IACjBA,EAAc,EAAG,KAId,IAAMQ,EAAiB,WAAM,IAAA5B,EAEOC,mBAAS0B,KAFhBzB,EAAAJ,OAAAK,EAAA,EAAAL,CAAAE,EAAA,GAAA6B,EAAA/B,OAAAK,EAAA,EAAAL,CAAAI,EAAA,MAE1B4B,EAF0BD,EAAA,GAEjBE,EAFiBF,EAAA,GAEPG,EAFO9B,EAAA,GAYlC,OACEI,EAAAC,EAAAC,cAAA,OAAKyB,UAAWC,aACd5B,EAAAC,EAAAC,cAAA,QAAMyB,UAAWE,YAAWL,EAA5B,SAAwCC,GACxCzB,EAAAC,EAAAC,cAAA,QAAMyB,UAAWG,UAAjB,aACA9B,EAAAC,EAAAC,cAAC6B,EAAD,CACEJ,UAAW7B,SACXR,eAdN,SAAwBQ,GAGlBA,IAFkB0B,EAAUC,GAG9BC,EAAWL,UCXGW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cCHG,WAEjB,OACEF,EAAAC,EAAAC,cAACqC,EAAD,ODAY,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCGlInBC,EAAAC,QAAA,CAAkBrB,UAAA,kCAAAC,SAAA,iCAAAC,OAAA,+BAAAhC,OAAA","file":"static/js/main.da46764c.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport const Answer = ({\n                         answerQuestion,\n                         ...props\n                       }) => {\n\n  const [answer, setAnswer] = useState('');\n\n  function submitAnswer() {\n    answerQuestion(parseInt(answer));\n    setAnswer('');\n  }\n\n  function onKeyPress(e) {\n    if (e.key === 'Enter') {\n      submitAnswer();\n      e.preventDefault();\n    }\n  }\n\n  return (\n    <input\n      type=\"number\"\n      autoFocus\n      value={answer}\n      onChange={e => setAnswer(e.target.value)}\n      onKeyPress={onKeyPress}\n      {...props}\n    />\n  );\n};\n","export function randomInteger(from, to) {\n  const range = to - from + 1;\n  return Math.floor(Math.random() * range) + from;\n}\n","import React, { useState } from 'react';\nimport { answer, container, equals, question } from './Multiplication.module.css';\nimport { Answer } from \"./Answer\";\nimport { randomInteger } from \"./util\";\n\n// TODO filter out questions such as (x<=9)*(y<=9), 10*x, 11*(x<=9)\n// TODO don't show same question twice in a row, including reversed\n\nfunction pickNewNumbers() {\n  return [\n    randomInteger(7, 19),\n    randomInteger(7, 19)\n  ]\n}\n\nexport const Multiplication = () => {\n\n  const [[number1, number2], setNumbers] = useState(pickNewNumbers());\n\n  function answerQuestion(answer) {\n    const correctAnswer = number1 * number2;\n\n    if (answer === correctAnswer) {\n      setNumbers(pickNewNumbers());\n    }\n  }\n\n  return (\n    <div className={container}>\n      <span className={question}>{number1} Ã— {number2}</span>\n      <span className={equals}>&nbsp;=&nbsp;</span>\n      <Answer\n        className={answer}\n        answerQuestion={answerQuestion}\n      />\n    </div>\n  );\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Multiplication } from \"./Multiplication\";\n\nexport const App = () => {\n\n  return (\n    <Multiplication/>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Multiplication_container__1IVb9\",\"question\":\"Multiplication_question__mg3mZ\",\"equals\":\"Multiplication_equals__GCw2m\",\"answer\":\"Multiplication_answer__gnhBk\"};"],"sourceRoot":""}